"use strict";
/*---------------------------------------------------------------------------------------------
*  Copyright (c) Microsoft Corporation. All rights reserved.
*  Licensed under the MIT License. See License.txt in the project root for license information.
*--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const vscode_azureextensionui_1 = require("vscode-azureextensionui");
const extensionVariables_1 = require("../extensionVariables");
var javaUtils;
(function (javaUtils) {
    const DEFAULT_PORT = '8080';
    const PORT_KEY = 'PORT';
    function isJavaTomcatRuntime(runtime) {
        return !!runtime && runtime.toLowerCase().startsWith('tomcat');
    }
    javaUtils.isJavaTomcatRuntime = isJavaTomcatRuntime;
    function isJavaSERuntime(runtime) {
        return !!runtime && runtime.toLowerCase() === 'java|8-jre8';
    }
    javaUtils.isJavaSERuntime = isJavaSERuntime;
    function isJavaSERequiredPortConfigured(appSettings) {
        if (appSettings && appSettings.properties) {
            for (const key of Object.keys(appSettings.properties)) {
                if (key.toUpperCase() === PORT_KEY) {
                    return true;
                }
            }
        }
        return false;
    }
    javaUtils.isJavaSERequiredPortConfigured = isJavaSERequiredPortConfigured;
    function configureJavaSEAppSettings(siteClient) {
        return __awaiter(this, void 0, void 0, function* () {
            const appSettings = yield siteClient.listApplicationSettings();
            if (isJavaSERequiredPortConfigured(appSettings)) {
                return undefined;
            }
            // tslint:disable-next-line:strict-boolean-expressions
            appSettings.properties = appSettings.properties || {};
            const port = yield extensionVariables_1.ext.ui.showInputBox({
                value: DEFAULT_PORT,
                prompt: 'Configure the PORT (Application Settings) which your Java SE Web App exposes',
                placeHolder: 'PORT',
                validateInput: (input) => {
                    return /^[0-9]+$/.test(input) ? undefined : 'please specify a valid port number';
                }
            });
            if (!port) {
                throw new vscode_azureextensionui_1.UserCancelledError();
            }
            appSettings.properties[PORT_KEY] = port;
            return siteClient.updateApplicationSettings(appSettings);
        });
    }
    javaUtils.configureJavaSEAppSettings = configureJavaSEAppSettings;
})(javaUtils = exports.javaUtils || (exports.javaUtils = {}));
//# sourceMappingURL=javaUtils.js.map