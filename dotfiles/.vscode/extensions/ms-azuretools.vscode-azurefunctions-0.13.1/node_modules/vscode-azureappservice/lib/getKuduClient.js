"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ms_rest_1 = require("ms-rest");
const vscode_azureextensionui_1 = require("vscode-azureextensionui");
const vscode_azurekudu_1 = require("vscode-azurekudu");
const localize_1 = require("./localize");
const nonNull_1 = require("./utils/nonNull");
function getKuduClient(client) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!client.kuduHostName) {
            const asp = yield client.getAppServicePlan();
            const notSupportedLinux = localize_1.localize('notSupportedLinux', 'This operation is not supported by App Service plans with kind "{0}" and sku tier "{1}".', client.kind, asp && asp.sku && asp.sku.tier);
            throw new Error(notSupportedLinux);
        }
        const user = yield client.getWebAppPublishCredential();
        const cred = new ms_rest_1.BasicAuthenticationCredentials(user.publishingUserName, nonNull_1.nonNullProp(user, 'publishingPassword'));
        const kuduClient = new vscode_azurekudu_1.default(cred, client.kuduUrl);
        vscode_azureextensionui_1.addExtensionUserAgent(kuduClient);
        return kuduClient;
    });
}
exports.getKuduClient = getKuduClient;
//# sourceMappingURL=getKuduClient.js.map