"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const extensionVariables_1 = require("../extensionVariables");
const FileUtilities = require("../FileUtilities");
const getKuduClient_1 = require("../getKuduClient");
const localize_1 = require("../localize");
const formatDeployLog_1 = require("./formatDeployLog");
const waitForDeploymentToComplete_1 = require("./waitForDeploymentToComplete");
function deployWar(client, fsPath) {
    return __awaiter(this, void 0, void 0, function* () {
        const kuduClient = yield getKuduClient_1.getKuduClient(client);
        if (FileUtilities.getFileExtension(fsPath) !== 'war') {
            throw new Error(localize_1.localize('NotAWarError', 'Path specified is not a war file'));
        }
        extensionVariables_1.ext.outputChannel.appendLine(formatDeployLog_1.formatDeployLog(client, localize_1.localize('deployStart', 'Starting deployment...')));
        yield kuduClient.pushDeployment.warPushDeploy(fs.createReadStream(fsPath), { isAsync: true });
        yield waitForDeploymentToComplete_1.waitForDeploymentToComplete(client, kuduClient);
    });
}
exports.deployWar = deployWar;
//# sourceMappingURL=deployWar.js.map