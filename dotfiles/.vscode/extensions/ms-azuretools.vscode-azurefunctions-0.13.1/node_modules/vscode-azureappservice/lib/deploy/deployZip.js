"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const fse = require("fs-extra");
const vscode = require("vscode");
const extensionVariables_1 = require("../extensionVariables");
const FileUtilities = require("../FileUtilities");
const getKuduClient_1 = require("../getKuduClient");
const localize_1 = require("../localize");
const deployToStorageAccount_1 = require("./deployToStorageAccount");
const formatDeployLog_1 = require("./formatDeployLog");
const waitForDeploymentToComplete_1 = require("./waitForDeploymentToComplete");
function deployZip(client, fsPath, configurationSectionName, aspPromise) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!(yield fse.pathExists(fsPath))) {
            throw new Error(localize_1.localize('pathNotExist', 'Failed to deploy path that does not exist: {0}', fsPath));
        }
        let zipFilePath;
        let createdZip = false;
        if (FileUtilities.getFileExtension(fsPath) === 'zip') {
            zipFilePath = fsPath;
        }
        else {
            createdZip = true;
            extensionVariables_1.ext.outputChannel.appendLine(formatDeployLog_1.formatDeployLog(client, localize_1.localize('zipCreate', 'Creating zip package...')));
            zipFilePath = yield getZipFileToDeploy(fsPath, configurationSectionName);
        }
        try {
            extensionVariables_1.ext.outputChannel.appendLine(formatDeployLog_1.formatDeployLog(client, localize_1.localize('deployStart', 'Starting deployment...')));
            const asp = yield aspPromise;
            // Assume it's consumption if we can't get the plan (sometimes happens with brand new plans). Consumption is recommended and more popular for functions
            const isConsumption = !asp || (!!asp.sku && !!asp.sku.tier && asp.sku.tier.toLowerCase() === 'dynamic');
            if (client.kind.toLowerCase().includes('linux') && isConsumption) {
                // Linux consumption doesn't support kudu zipPushDeploy
                yield deployToStorageAccount_1.deployToStorageAccount(client, zipFilePath);
            }
            else {
                const kuduClient = yield getKuduClient_1.getKuduClient(client);
                yield kuduClient.pushDeployment.zipPushDeploy(fs.createReadStream(zipFilePath), { isAsync: true });
                yield waitForDeploymentToComplete_1.waitForDeploymentToComplete(client, kuduClient);
            }
        }
        finally {
            if (createdZip) {
                yield fse.remove(zipFilePath);
            }
        }
    });
}
exports.deployZip = deployZip;
function getZipFileToDeploy(fsPath, configurationSectionName) {
    return __awaiter(this, void 0, void 0, function* () {
        if (yield FileUtilities.isDirectory(fsPath)) {
            const zipDeployConfig = vscode.workspace.getConfiguration(configurationSectionName, vscode.Uri.file(fsPath));
            const globPattern = zipDeployConfig.get('zipGlobPattern');
            const ignorePattern = zipDeployConfig.get('zipIgnorePattern');
            return FileUtilities.zipDirectory(fsPath, globPattern, ignorePattern);
        }
        else {
            return FileUtilities.zipFile(fsPath);
        }
    });
}
//# sourceMappingURL=deployZip.js.map