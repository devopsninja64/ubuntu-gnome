"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const archiver = require("archiver");
const fs = require("fs");
const os = require("os");
const path = require("path");
function getFileExtension(fsPath) {
    return fsPath.split('.').pop();
}
exports.getFileExtension = getFileExtension;
function isDirectory(fsPath) {
    return __awaiter(this, void 0, void 0, function* () {
        const fsStats = yield new Promise((resolve, reject) => {
            fs.lstat(fsPath, (err, stats) => {
                if (err) {
                    reject(err);
                }
                else {
                    resolve(stats);
                }
            });
        });
        return fsStats.isDirectory();
    });
}
exports.isDirectory = isDirectory;
function zipFile(filePath) {
    return __awaiter(this, void 0, void 0, function* () {
        const zipFilePath = path.join(os.tmpdir(), `${randomFileName()}.zip`);
        yield new Promise((resolve, reject) => {
            const zipOutput = fs.createWriteStream(zipFilePath);
            const zipper = archiver('zip');
            zipOutput.on('close', resolve);
            zipper.on('error', reject);
            zipper.pipe(zipOutput);
            zipper.file(filePath, { name: path.basename(filePath) });
            zipper.finalize();
        });
        return zipFilePath;
    });
}
exports.zipFile = zipFile;
function zipDirectory(folderPath, globPattern = '**/*', ignorePattern) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!folderPath.endsWith(path.sep)) {
            folderPath += path.sep;
        }
        const zipFilePath = path.join(os.tmpdir(), `${randomFileName()}.zip`);
        yield new Promise((resolve, reject) => {
            const zipOutput = fs.createWriteStream(zipFilePath);
            zipOutput.on('close', resolve);
            const zipper = archiver('zip', { zlib: { level: 9 } });
            zipper.on('error', reject);
            zipper.pipe(zipOutput);
            zipper.glob(globPattern, {
                cwd: folderPath,
                dot: true,
                ignore: ignorePattern
            });
            void zipper.finalize();
        });
        return zipFilePath;
    });
}
exports.zipDirectory = zipDirectory;
function randomFileName() {
    // tslint:disable-next-line:insecure-random
    return Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 10);
}
exports.randomFileName = randomFileName;
//# sourceMappingURL=FileUtilities.js.map