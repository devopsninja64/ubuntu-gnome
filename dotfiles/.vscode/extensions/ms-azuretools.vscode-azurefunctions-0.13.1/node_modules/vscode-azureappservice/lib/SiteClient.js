"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const azure_arm_website_1 = require("azure-arm-website");
const vscode_azureextensionui_1 = require("vscode-azureextensionui");
const localize_1 = require("./localize");
const nonNull_1 = require("./utils/nonNull");
/**
 * Wrapper of a WebSiteManagementClient for use with a specific Site
 * Reduces the number of arguments needed for every call and automatically ensures the 'slot' method is called when appropriate
 */
class SiteClient {
    constructor(site, subscription) {
        this._funcPreviewSlotError = new Error(localize_1.localize('functionsSlotPreview', 'This operation is not supported for slots, which are still in preview.'));
        let matches = nonNull_1.nonNullProp(site, 'serverFarmId').match(/\/subscriptions\/(.*)\/resourceGroups\/(.*)\/providers\/Microsoft.Web\/serverfarms\/(.*)/);
        matches = nonNull_1.nonNullValue(matches, 'Invalid serverFarmId.');
        this.id = nonNull_1.nonNullProp(site, 'id');
        [this.siteName, this.slotName] = nonNull_1.nonNullProp(site, 'name').split('/');
        this.isSlot = !!this.slotName;
        this.fullName = this.siteName + (this.slotName ? `-${this.slotName}` : '');
        this.resourceGroup = nonNull_1.nonNullProp(site, 'resourceGroup');
        this.location = site.location;
        this.serverFarmId = nonNull_1.nonNullProp(site, 'serverFarmId');
        this.kind = nonNull_1.nonNullProp(site, 'kind');
        this.initialState = nonNull_1.nonNullProp(site, 'state');
        this.isFunctionApp = !!site.kind && site.kind.includes('functionapp');
        this.planResourceGroup = matches[2];
        this.planName = matches[3];
        this.defaultHostName = nonNull_1.nonNullProp(site, 'defaultHostName');
        this.defaultHostUrl = `https://${this.defaultHostName}`;
        const kuduRepositoryUrl = nonNull_1.nonNullProp(site, 'hostNameSslStates').find((h) => !!h.hostType && h.hostType.toLowerCase() === 'repository');
        if (kuduRepositoryUrl) {
            this.kuduHostName = kuduRepositoryUrl.name;
            this.kuduUrl = `https://${this.kuduHostName}`;
            this.gitUrl = `${this.kuduHostName}:443/${site.repositorySiteName}.git`;
        }
        this._subscription = subscription;
    }
    get _client() {
        return vscode_azureextensionui_1.createAzureClient(this._subscription, azure_arm_website_1.WebSiteManagementClient);
    }
    stop() {
        return __awaiter(this, void 0, void 0, function* () {
            this.slotName ?
                yield this._client.webApps.stopSlot(this.resourceGroup, this.siteName, this.slotName) :
                yield this._client.webApps.stop(this.resourceGroup, this.siteName);
        });
    }
    start() {
        return __awaiter(this, void 0, void 0, function* () {
            this.slotName ?
                yield this._client.webApps.startSlot(this.resourceGroup, this.siteName, this.slotName) :
                yield this._client.webApps.start(this.resourceGroup, this.siteName);
        });
    }
    getState() {
        return __awaiter(this, void 0, void 0, function* () {
            return (this.slotName ?
                yield this._client.webApps.getSlot(this.resourceGroup, this.siteName, this.slotName) :
                yield this._client.webApps.get(this.resourceGroup, this.siteName)).state;
        });
    }
    getWebAppPublishCredential() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.slotName ?
                yield this._client.webApps.listPublishingCredentialsSlot(this.resourceGroup, this.siteName, this.slotName) :
                yield this._client.webApps.listPublishingCredentials(this.resourceGroup, this.siteName);
        });
    }
    getSiteConfig() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.slotName ?
                yield this._client.webApps.getConfigurationSlot(this.resourceGroup, this.siteName, this.slotName) :
                yield this._client.webApps.getConfiguration(this.resourceGroup, this.siteName);
        });
    }
    updateConfiguration(config) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.slotName ?
                yield this._client.webApps.updateConfigurationSlot(this.resourceGroup, this.siteName, config, this.slotName) :
                yield this._client.webApps.updateConfiguration(this.resourceGroup, this.siteName, config);
        });
    }
    getLogsConfig() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.slotName ?
                yield this._client.webApps.getDiagnosticLogsConfigurationSlot(this.resourceGroup, this.siteName, this.slotName) :
                yield this._client.webApps.getDiagnosticLogsConfiguration(this.resourceGroup, this.siteName);
        });
    }
    updateLogsConfig(config) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.slotName ?
                yield this._client.webApps.updateDiagnosticLogsConfigSlot(this.resourceGroup, this.siteName, config, this.slotName) :
                yield this._client.webApps.updateDiagnosticLogsConfig(this.resourceGroup, this.siteName, config);
        });
    }
    getAppServicePlan() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this._client.appServicePlans.get(this.planResourceGroup, this.planName);
        });
    }
    getSourceControl() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.slotName ?
                yield this._client.webApps.getSourceControlSlot(this.resourceGroup, this.siteName, this.slotName) :
                yield this._client.webApps.getSourceControl(this.resourceGroup, this.siteName);
        });
    }
    updateSourceControl(siteSourceControl) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.slotName ?
                yield this._client.webApps.createOrUpdateSourceControlSlot(this.resourceGroup, this.siteName, siteSourceControl, this.slotName) :
                yield this._client.webApps.createOrUpdateSourceControl(this.resourceGroup, this.siteName, siteSourceControl);
        });
    }
    syncRepository() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.slotName ?
                yield this._client.webApps.syncRepositorySlot(this.resourceGroup, this.siteName, this.slotName) :
                yield this._client.webApps.syncRepository(this.resourceGroup, this.siteName);
        });
    }
    listApplicationSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.slotName ?
                yield this._client.webApps.listApplicationSettingsSlot(this.resourceGroup, this.siteName, this.slotName) :
                yield this._client.webApps.listApplicationSettings(this.resourceGroup, this.siteName);
        });
    }
    updateApplicationSettings(appSettings) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.slotName ?
                yield this._client.webApps.updateApplicationSettingsSlot(this.resourceGroup, this.siteName, appSettings, this.slotName) :
                yield this._client.webApps.updateApplicationSettings(this.resourceGroup, this.siteName, appSettings);
        });
    }
    deleteMethod(options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.slotName ?
                yield this._client.webApps.deleteSlot(this.resourceGroup, this.siteName, this.slotName, options) :
                yield this._client.webApps.deleteMethod(this.resourceGroup, this.siteName, options);
        });
    }
    listInstanceIdentifiers() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.slotName ?
                yield this._client.webApps.listInstanceIdentifiersSlot(this.resourceGroup, this.siteName, this.slotName) :
                yield this._client.webApps.listInstanceIdentifiers(this.resourceGroup, this.siteName);
        });
    }
    listSourceControls() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this._client.listSourceControls();
        });
    }
    listFunctions() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.slotName) {
                throw this._funcPreviewSlotError;
            }
            else {
                return yield this._client.webApps.listFunctions(this.resourceGroup, this.siteName);
            }
        });
    }
    listFunctionsNext(nextPageLink) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.slotName) {
                throw this._funcPreviewSlotError;
            }
            else {
                return yield this._client.webApps.listFunctionsNext(nextPageLink);
            }
        });
    }
    getFunction(functionName) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.slotName) {
                throw this._funcPreviewSlotError;
            }
            else {
                return yield this._client.webApps.getFunction(this.resourceGroup, this.siteName, functionName);
            }
        });
    }
    deleteFunction(functionName) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.slotName) {
                throw this._funcPreviewSlotError;
            }
            else {
                return yield this._client.webApps.deleteFunction(this.resourceGroup, this.siteName, functionName);
            }
        });
    }
    listFunctionSecrets(functionName) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.slotName ?
                yield this._client.webApps.listFunctionSecretsSlot(this.resourceGroup, this.siteName, functionName, this.slotName) :
                yield this._client.webApps.listFunctionSecrets(this.resourceGroup, this.siteName, functionName);
        });
    }
    getFunctionsAdminToken() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.slotName ?
                yield this._client.webApps.getFunctionsAdminTokenSlot(this.resourceGroup, this.siteName, this.slotName) :
                yield this._client.webApps.getFunctionsAdminToken(this.resourceGroup, this.siteName);
        });
    }
    syncFunctionTriggers() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this.slotName ?
                    yield this._client.webApps.syncFunctionTriggersSlot(this.resourceGroup, this.siteName, this.slotName) :
                    yield this._client.webApps.syncFunctionTriggers(this.resourceGroup, this.siteName);
            }
            catch (error) {
                // For some reason this call incorrectly throws an error when the status code is 200
                if (vscode_azureextensionui_1.parseError(error).errorType !== '200') {
                    throw error;
                }
            }
        });
    }
    getPublishingUser() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this._client.getPublishingUser({});
        });
    }
}
exports.SiteClient = SiteClient;
//# sourceMappingURL=SiteClient.js.map