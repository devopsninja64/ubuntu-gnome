"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const vscode_azureextensionui_1 = require("vscode-azureextensionui");
const extensionVariables_1 = require("../extensionVariables");
const AppSettingTreeItem_1 = require("./AppSettingTreeItem");
function validateAppSettingKey(settings, newKey, oldKey) {
    newKey = newKey ? newKey.trim() : '';
    oldKey = oldKey ? oldKey.trim().toLowerCase() : oldKey;
    if (newKey.length === 0) {
        return 'Key must have at least one non-whitespace character.';
    }
    if (settings.properties && newKey.toLowerCase() !== oldKey) {
        for (const key of Object.keys(settings.properties)) {
            if (key.toLowerCase() === newKey.toLowerCase()) {
                return `Setting "${newKey}" already exists.`;
            }
        }
    }
    return undefined;
}
exports.validateAppSettingKey = validateAppSettingKey;
class AppSettingsTreeItem extends vscode_azureextensionui_1.AzureParentTreeItem {
    constructor() {
        super(...arguments);
        this.label = 'Application Settings';
        this.childTypeLabel = 'App Setting';
        this.contextValue = AppSettingsTreeItem.contextValue;
    }
    get id() {
        return 'application';
    }
    get iconPath() {
        return {
            light: path.join(__filename, '..', '..', '..', 'resources', 'light', 'AppSettings_color.svg'),
            dark: path.join(__filename, '..', '..', '..', 'resources', 'dark', 'AppSettings_color.svg')
        };
    }
    hasMoreChildrenImpl() {
        return false;
    }
    loadMoreChildrenImpl(_clearCache) {
        return __awaiter(this, void 0, void 0, function* () {
            this._settings = yield this.root.client.listApplicationSettings();
            const treeItems = [];
            // tslint:disable-next-line:strict-boolean-expressions
            const properties = this._settings.properties || {};
            Object.keys(properties).forEach((key) => {
                treeItems.push(new AppSettingTreeItem_1.AppSettingTreeItem(this, key, properties[key]));
            });
            return treeItems;
        });
    }
    editSettingItem(oldKey, newKey, value) {
        return __awaiter(this, void 0, void 0, function* () {
            const settings = yield this.ensureSettings();
            if (settings.properties) {
                if (oldKey !== newKey) {
                    delete settings.properties[oldKey];
                }
                settings.properties[newKey] = value;
            }
            yield this.root.client.updateApplicationSettings(settings);
        });
    }
    deleteSettingItem(key) {
        return __awaiter(this, void 0, void 0, function* () {
            const settings = yield this.ensureSettings();
            if (settings.properties) {
                delete settings.properties[key];
            }
            yield this.root.client.updateApplicationSettings(settings);
        });
    }
    createChildImpl(showCreatingTreeItem) {
        return __awaiter(this, void 0, void 0, function* () {
            const settings = yield this.ensureSettings();
            const newKey = yield extensionVariables_1.ext.ui.showInputBox({
                prompt: 'Enter new setting key',
                validateInput: (v) => validateAppSettingKey(settings, v)
            });
            const newValue = yield extensionVariables_1.ext.ui.showInputBox({
                prompt: `Enter setting value for "${newKey}"`
            });
            if (!settings.properties) {
                settings.properties = {};
            }
            showCreatingTreeItem(newKey);
            settings.properties[newKey] = newValue;
            yield this.root.client.updateApplicationSettings(settings);
            return new AppSettingTreeItem_1.AppSettingTreeItem(this, newKey, newValue);
        });
    }
    ensureSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this._settings) {
                yield this.getCachedChildren();
            }
            return this._settings;
        });
    }
}
AppSettingsTreeItem.contextValue = 'applicationSettings';
exports.AppSettingsTreeItem = AppSettingsTreeItem;
//# sourceMappingURL=AppSettingsTreeItem.js.map