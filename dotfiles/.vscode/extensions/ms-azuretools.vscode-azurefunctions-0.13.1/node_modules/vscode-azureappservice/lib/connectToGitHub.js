"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ms_rest_1 = require("ms-rest");
const opn = require("opn");
const request = require("request-promise");
const vscode = require("vscode");
const vscode_azureextensionui_1 = require("vscode-azureextensionui");
const extensionVariables_1 = require("./extensionVariables");
const localize_1 = require("./localize");
const signRequest_1 = require("./signRequest");
const nonNull_1 = require("./utils/nonNull");
function connectToGitHub(node, client, context) {
    return __awaiter(this, void 0, void 0, function* () {
        const requestOptions = new ms_rest_1.WebResource();
        requestOptions.resolveWithFullResponse = true;
        requestOptions.headers = {
            ['User-Agent']: 'vscode-azureappservice-extension'
        };
        const oAuth2Token = (yield client.listSourceControls())[0].token;
        if (!oAuth2Token) {
            yield showGitHubAuthPrompt(node, client, context);
            context.suppressErrorDisplay = true;
            const noToken = localize_1.localize('noToken', 'No oAuth2 Token.');
            throw new Error(noToken);
        }
        yield signRequest_1.signRequest(requestOptions, new ms_rest_1.TokenCredentials(oAuth2Token));
        requestOptions.url = 'https://api.github.com/user';
        const gitHubUser = yield getJsonRequest(requestOptions, node, client, context);
        requestOptions.url = 'https://api.github.com/user/orgs';
        const gitHubOrgs = yield getJsonRequest(requestOptions, node, client, context);
        const orgQuickPicks = createQuickPickFromJsons([gitHubUser], 'login').concat(createQuickPickFromJsons(gitHubOrgs, 'login'));
        const orgQuickPick = (yield extensionVariables_1.ext.ui.showQuickPick(orgQuickPicks, { placeHolder: 'Choose your organization.' })).data;
        requestOptions.url = nonNull_1.nonNullProp(orgQuickPick, 'repos_url');
        const picksCache = { picks: [] };
        let repoQuickPick;
        do {
            repoQuickPick = (yield extensionVariables_1.ext.ui.showQuickPick(getGitHubReposQuickPicks(picksCache, requestOptions, node, client, context), { placeHolder: 'Choose repository.' })).data;
        } while (!repoQuickPick);
        requestOptions.url = `${repoQuickPick.url}/branches`;
        const gitHubBranches = yield getJsonRequest(requestOptions, node, client, context);
        const branchQuickPicks = createQuickPickFromJsons(gitHubBranches, 'name');
        const branchQuickPick = (yield extensionVariables_1.ext.ui.showQuickPick(branchQuickPicks, { placeHolder: 'Choose branch.' })).data;
        const siteSourceControl = {
            repoUrl: repoQuickPick.html_url,
            branch: branchQuickPick.name,
            isManualIntegration: false,
            deploymentRollbackEnabled: true,
            isMercurial: false
        };
        const repoName = `${orgQuickPick.login}/${repoQuickPick.name}`;
        try {
            const connectingToGithub = localize_1.localize('ConnectingToGithub', '"{0}" is being connected to repo "{1}". This may take several minutes...', client.fullName, repoName);
            const connectedToGithub = localize_1.localize('ConnectedToGithub', 'Repo "{0}" is connected and deployed to "{1}".', repoName, client.fullName);
            yield vscode.window.withProgress({ location: vscode.ProgressLocation.Notification, title: connectingToGithub }, () => __awaiter(this, void 0, void 0, function* () {
                extensionVariables_1.ext.outputChannel.appendLine(connectingToGithub);
                yield client.updateSourceControl(siteSourceControl);
                vscode.window.showInformationMessage(connectedToGithub);
                extensionVariables_1.ext.outputChannel.appendLine(connectedToGithub);
            }));
        }
        catch (err) {
            try {
                // a resync will fix the first broken build
                // https://github.com/projectkudu/kudu/issues/2277
                yield client.syncRepository();
            }
            catch (error) {
                const parsedError = vscode_azureextensionui_1.parseError(error);
                // The portal returns 200, but is expecting a 204 which causes it to throw an error even after a successful sync
                if (parsedError.message.indexOf('"statusCode":200') === -1) {
                    throw error;
                }
            }
        }
    });
}
exports.connectToGitHub = connectToGitHub;
function showGitHubAuthPrompt(node, client, context) {
    return __awaiter(this, void 0, void 0, function* () {
        const invalidToken = localize_1.localize('tokenExpired', 'Azure\'s GitHub token in invalid.  Authorize in the "Deployment Center"');
        const goToPortal = { title: localize_1.localize('goToPortal', 'Go to Portal') };
        let input = vscode_azureextensionui_1.DialogResponses.learnMore;
        while (input === vscode_azureextensionui_1.DialogResponses.learnMore) {
            input = yield vscode.window.showErrorMessage(invalidToken, goToPortal, vscode_azureextensionui_1.DialogResponses.learnMore);
            if (input === vscode_azureextensionui_1.DialogResponses.learnMore) {
                context.properties.githubLearnMore = 'true';
                // tslint:disable-next-line:no-unsafe-any
                opn('https://aka.ms/B7g6sw');
            }
        }
        if (input === goToPortal) {
            context.properties.githubGoToPortal = 'true';
            node.openInPortal(`${client.id}/vstscd`);
        }
    });
}
function getJsonRequest(requestOptions, node, client, context) {
    return __awaiter(this, void 0, void 0, function* () {
        // Reference for GitHub REST routes
        // https://developer.github.com/v3/
        // Note: blank after user implies look up authorized user
        try {
            // tslint:disable-next-line:no-unsafe-any
            const gitHubResponse = yield request(requestOptions).promise();
            if (gitHubResponse.headers.link) {
                const headerLink = gitHubResponse.headers.link;
                const linkObject = parseLinkHeaderToGitHubLinkObject(headerLink);
                requestOptions.nextLink = linkObject.next;
            }
            // tslint:disable-next-line:no-unsafe-any
            return JSON.parse(gitHubResponse.body);
        }
        catch (error) {
            const parsedError = vscode_azureextensionui_1.parseError(error);
            if (parsedError.message.indexOf('Bad credentials') > -1) {
                // the default error is just "Bad credentials," which is an unhelpful error message
                yield showGitHubAuthPrompt(node, client, context);
                context.suppressErrorDisplay = true;
            }
            throw error;
        }
    });
}
/**
 * @param label Property of JSON that will be used as the QuickPicks label
 * @param description Optional property of JSON that will be used as QuickPicks description
 * @param data Optional property of JSON that will be used as QuickPicks data saved as a NameValue pair
 */
function createQuickPickFromJsons(jsons, label, description) {
    const quickPicks = [];
    for (const json of jsons) {
        if (!json[label]) {
            // skip this JSON if it doesn't have this label
            continue;
        }
        if (description && !json[description]) {
            // if the label exists, but the description does not, then description will just be left blank
            description = undefined;
        }
        quickPicks.push({
            label: json[label],
            description: `${description ? json[description] : ''}`,
            data: json
        });
    }
    return quickPicks;
}
function parseLinkHeaderToGitHubLinkObject(linkHeader) {
    const linkUrls = linkHeader.split(', ');
    const linkMap = {};
    // link header response is "<https://api.github.com/organizations/6154722/repos?page=2>; rel="prev", <https://api.github.com/organizations/6154722/repos?page=4>; rel="next""
    const relative = 'rel=';
    for (const url of linkUrls) {
        linkMap[url.substring(url.indexOf(relative) + relative.length + 1, url.length - 1)] = url.substring(url.indexOf('<') + 1, url.indexOf('>'));
    }
    return linkMap;
}
function getGitHubReposQuickPicks(cache, requestOptions, node, client, context, timeoutSeconds = 10) {
    return __awaiter(this, void 0, void 0, function* () {
        const timeoutMs = timeoutSeconds * 1000;
        const startTime = Date.now();
        let gitHubRepos = [];
        do {
            gitHubRepos = gitHubRepos.concat(yield getJsonRequest(requestOptions, node, client, context));
            if (requestOptions.nextLink) {
                // if there is another link, set the next request url to point at that
                requestOptions.url = requestOptions.nextLink;
            }
        } while (requestOptions.nextLink && startTime + timeoutMs > Date.now());
        cache.picks = cache.picks.concat(createQuickPickFromJsons(gitHubRepos, 'name'));
        cache.picks.sort((a, b) => a.label.localeCompare(b.label));
        if (requestOptions.nextLink) {
            return [{
                    label: '$(sync) Load More',
                    suppressPersistence: true,
                    data: undefined
                }].concat(cache.picks);
        }
        else {
            return cache.picks;
        }
    });
}
//# sourceMappingURL=connectToGitHub.js.map