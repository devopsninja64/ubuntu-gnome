"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("util");
const vscode = require("vscode");
const vscode_azureextensionui_1 = require("vscode-azureextensionui");
const extensionVariables_1 = require("./extensionVariables");
const localize_1 = require("./localize");
function deleteSite(client) {
    return __awaiter(this, void 0, void 0, function* () {
        const confirmMessage = localize_1.localize('deleteConfirmation', 'Are you sure you want to delete "{0}"?', client.fullName);
        yield extensionVariables_1.ext.ui.showWarningMessage(confirmMessage, { modal: true }, vscode_azureextensionui_1.DialogResponses.deleteResponse, vscode_azureextensionui_1.DialogResponses.cancel);
        let plan;
        let deletePlan = false;
        if (!client.isSlot) {
            // API calls not necessary for deployment slots
            plan = yield client.getAppServicePlan();
        }
        if (!client.isSlot && plan && !util_1.isNullOrUndefined(plan.numberOfSites) && plan.numberOfSites < 2) {
            const message = localize_1.localize('deleteLastServicePlan', 'This is the last app in the App Service plan "{0}". Do you want to delete this App Service plan to prevent unexpected charges?', plan.name);
            const input = yield extensionVariables_1.ext.ui.showWarningMessage(message, { modal: true }, vscode_azureextensionui_1.DialogResponses.yes, vscode_azureextensionui_1.DialogResponses.no, vscode_azureextensionui_1.DialogResponses.cancel);
            deletePlan = input === vscode_azureextensionui_1.DialogResponses.yes;
        }
        const deleting = localize_1.localize('Deleting', 'Deleting "{0}"...', client.fullName);
        const deleteSucceeded = localize_1.localize('DeleteSucceeded', 'Successfully deleted "{0}".', client.fullName);
        yield vscode.window.withProgress({ location: vscode.ProgressLocation.Notification, title: deleting }, () => __awaiter(this, void 0, void 0, function* () {
            extensionVariables_1.ext.outputChannel.appendLine(deleting);
            yield client.deleteMethod({ deleteEmptyServerFarm: deletePlan });
            vscode.window.showInformationMessage(deleteSucceeded);
            extensionVariables_1.ext.outputChannel.appendLine(deleteSucceeded);
        }));
    });
}
exports.deleteSite = deleteSite;
//# sourceMappingURL=deleteSite.js.map