"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const azure_arm_website_1 = require("azure-arm-website");
const vscode_1 = require("vscode");
const vscode_azureextensionui_1 = require("vscode-azureextensionui");
const extensionVariables_1 = require("./extensionVariables");
const localize_1 = require("./localize");
function createSlot(root, existingSlots, showCreatingTreeItem) {
    return __awaiter(this, void 0, void 0, function* () {
        const client = vscode_azureextensionui_1.createAzureClient(root, azure_arm_website_1.default);
        const slotName = (yield extensionVariables_1.ext.ui.showInputBox({
            prompt: localize_1.localize('enterSlotName', 'Enter a unique name for the new deployment slot'),
            validateInput: (value) => __awaiter(this, void 0, void 0, function* () { return validateSlotName(value, client, root); })
        })).trim();
        const newDeploymentSlot = {
            name: slotName,
            kind: root.client.kind,
            location: root.client.location,
            serverFarmId: root.client.serverFarmId,
            siteConfig: {
                appSettings: [] // neccesary to have clean appSettings; by default it copies the production's slot
            }
        };
        const configurationSource = yield chooseConfigurationSource(root, existingSlots);
        if (!!configurationSource) {
            const appSettings = yield parseAppSettings(configurationSource);
            // tslint:disable-next-line:no-non-null-assertion
            newDeploymentSlot.siteConfig.appSettings = appSettings;
        }
        showCreatingTreeItem(slotName);
        const creatingSlot = localize_1.localize('creatingSlot', 'Creating slot "{0}"...', slotName);
        return yield vscode_1.window.withProgress({ location: vscode_1.ProgressLocation.Notification, title: creatingSlot }, () => __awaiter(this, void 0, void 0, function* () {
            return yield client.webApps.createOrUpdateSlot(root.client.resourceGroup, root.client.siteName, newDeploymentSlot, slotName);
        }));
    });
}
exports.createSlot = createSlot;
function validateSlotName(value, client, root) {
    return __awaiter(this, void 0, void 0, function* () {
        value = value ? value.trim() : '';
        // Can not have "production" as a slot name, but checkNameAvailability doesn't validate that
        if (value === 'production') {
            return localize_1.localize('slotNotAvailable', 'The slot name "{0}" is not available.', value);
        }
        const nameAvailability = yield client.checkNameAvailability(`${root.client.siteName}-${value}`, 'Slot');
        if (!nameAvailability.nameAvailable) {
            return nameAvailability.message;
        }
        return undefined;
    });
}
function chooseConfigurationSource(root, existingSlots) {
    return __awaiter(this, void 0, void 0, function* () {
        const configurationSources = [{
                label: localize_1.localize('dontClone', "Don't clone configuration from an existing slot"),
                data: undefined
            }];
        const prodSiteClient = root.client;
        // add the production slot itself
        configurationSources.push({
            // tslint:disable-next-line:no-non-null-assertion
            label: prodSiteClient.fullName,
            data: prodSiteClient
        });
        // add the web app's current deployment slots
        for (const slot of existingSlots) {
            const slotSiteClient = slot.root.client;
            configurationSources.push({
                label: slotSiteClient.fullName,
                data: slotSiteClient
            });
        }
        const placeHolder = localize_1.localize('chooseSource', 'Choose a configuration source.');
        return (yield extensionVariables_1.ext.ui.showQuickPick(configurationSources, { placeHolder })).data;
    });
}
function parseAppSettings(siteClient) {
    return __awaiter(this, void 0, void 0, function* () {
        const appSettings = yield siteClient.listApplicationSettings();
        const appSettingPairs = [];
        if (appSettings.properties) {
            // iterate String Dictionary to parse into NameValuePair[]
            for (const key of Object.keys(appSettings.properties)) {
                appSettingPairs.push({ name: key, value: appSettings.properties[key] });
            }
        }
        return appSettingPairs;
    });
}
//# sourceMappingURL=createSlot.js.map