"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const getKuduClient_1 = require("./getKuduClient");
const localize_1 = require("./localize");
function getFile(client, filePath) {
    return __awaiter(this, void 0, void 0, function* () {
        const kuduClient = yield getKuduClient_1.getKuduClient(client);
        // tslint:disable:no-unsafe-any
        // tslint:disable-next-line:no-any
        const response = (yield kuduClient.vfs.getItemWithHttpOperationResponse(filePath)).response;
        if (response && response.headers && response.headers.etag) {
            return { data: response.body, etag: response.headers.etag };
            // tslint:enable:no-unsafe-any
        }
        else {
            throw new Error(localize_1.localize('failedToFindFile', 'Failed to find file with path "{0}".', filePath));
        }
    });
}
exports.getFile = getFile;
//# sourceMappingURL=getFile.js.map