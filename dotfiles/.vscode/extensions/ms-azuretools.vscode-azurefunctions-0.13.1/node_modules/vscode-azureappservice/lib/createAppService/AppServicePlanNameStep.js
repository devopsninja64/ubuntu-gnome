"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const vscode_azureextensionui_1 = require("vscode-azureextensionui");
const extensionVariables_1 = require("../extensionVariables");
const localize_1 = require("../localize");
const nonNull_1 = require("../utils/nonNull");
const AppServicePlanListStep_1 = require("./AppServicePlanListStep");
exports.appServicePlanNamingRules = {
    minLength: 1,
    maxLength: 40,
    invalidCharsRegExp: /[^a-zA-Z0-9\-]/
};
class AppServicePlanNameStep extends vscode_azureextensionui_1.AzureWizardPromptStep {
    prompt(wizardContext) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!wizardContext.newPlanName) {
                wizardContext.newPlanName = (yield extensionVariables_1.ext.ui.showInputBox({
                    value: yield wizardContext.relatedNameTask,
                    prompt: localize_1.localize('AppServicePlanPrompt', 'Enter the name of the new App Service plan.'),
                    validateInput: (value) => __awaiter(this, void 0, void 0, function* () { return yield this.validatePlanName(wizardContext, value); })
                })).trim();
            }
            return wizardContext;
        });
    }
    validatePlanName(wizardContext, name) {
        return __awaiter(this, void 0, void 0, function* () {
            name = name ? name.trim() : '';
            if (name.length < exports.appServicePlanNamingRules.minLength || name.length > exports.appServicePlanNamingRules.maxLength) {
                return localize_1.localize('invalidLength', 'The name must be between {0} and {1} characters.', exports.appServicePlanNamingRules.minLength, exports.appServicePlanNamingRules.maxLength);
            }
            else if (name.match(exports.appServicePlanNamingRules.invalidCharsRegExp)) {
                return localize_1.localize('invalidChars', "The name can only contain alphanumeric characters and hyphens.");
            }
            else if (wizardContext.resourceGroup && !(yield AppServicePlanListStep_1.AppServicePlanListStep.isNameAvailable(wizardContext, name, nonNull_1.nonNullProp(wizardContext.resourceGroup, 'name')))) {
                return localize_1.localize('nameAlreadyExists', 'App Service plan "{0}" already exists in resource group "{1}".', name, wizardContext.resourceGroup.name);
            }
            else {
                return undefined;
            }
        });
    }
}
exports.AppServicePlanNameStep = AppServicePlanNameStep;
//# sourceMappingURL=AppServicePlanNameStep.js.map