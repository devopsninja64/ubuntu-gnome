"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const vscode_azureextensionui_1 = require("vscode-azureextensionui");
const extensionVariables_1 = require("../extensionVariables");
const localize_1 = require("../localize");
const nonNull_1 = require("../utils/nonNull");
const AppKind_1 = require("./AppKind");
class AppServicePlanSkuStep extends vscode_azureextensionui_1.AzureWizardPromptStep {
    prompt(wizardContext) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!wizardContext.newPlanSku) {
                let pricingTiers = this.getPlanSkus().map((s) => {
                    return {
                        label: nonNull_1.nonNullProp(s, 'name'),
                        description: s.tier,
                        data: s
                    };
                });
                if (wizardContext.newSiteOS === AppKind_1.WebsiteOS.linux) {
                    // Free tier is not supported for Linux asp's
                    pricingTiers = pricingTiers.filter((plan) => {
                        return plan.description !== 'Free';
                    });
                }
                wizardContext.newPlanSku = (yield extensionVariables_1.ext.ui.showQuickPick(pricingTiers, { placeHolder: localize_1.localize('PricingTierPlaceholder', 'Select a pricing tier for the new App Service plan.') })).data;
            }
            return wizardContext;
        });
    }
    getPlanSkus() {
        return [
            {
                name: 'F1',
                tier: 'Free',
                size: 'F1',
                family: 'F',
                capacity: 1
            },
            {
                name: 'B1',
                tier: 'Basic',
                size: 'B1',
                family: 'B',
                capacity: 1
            },
            {
                name: 'B2',
                tier: 'Basic',
                size: 'B2',
                family: 'B',
                capacity: 1
            },
            {
                name: 'B3',
                tier: 'Basic',
                size: 'B3',
                family: 'B',
                capacity: 1
            },
            {
                name: 'S1',
                tier: 'Standard',
                size: 'S1',
                family: 'S',
                capacity: 1
            },
            {
                name: 'S2',
                tier: 'Standard',
                size: 'S2',
                family: 'S',
                capacity: 1
            },
            {
                name: 'S3',
                tier: 'Standard',
                size: 'S3',
                family: 'S',
                capacity: 1
            }
        ];
    }
}
exports.AppServicePlanSkuStep = AppServicePlanSkuStep;
//# sourceMappingURL=AppServicePlanSkuStep.js.map