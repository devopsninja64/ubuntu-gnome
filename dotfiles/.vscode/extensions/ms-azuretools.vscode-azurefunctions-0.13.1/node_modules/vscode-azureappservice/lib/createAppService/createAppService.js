"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const azure_arm_website_1 = require("azure-arm-website");
const vscode = require("vscode");
const vscode_azureextensionui_1 = require("vscode-azureextensionui");
const localize_1 = require("../localize");
const nonNull_1 = require("../utils/nonNull");
const AppKind_1 = require("./AppKind");
const AppServicePlanCreateStep_1 = require("./AppServicePlanCreateStep");
const AppServicePlanListStep_1 = require("./AppServicePlanListStep");
const createWebApp_1 = require("./createWebApp");
const SiteCreateStep_1 = require("./SiteCreateStep");
const SiteNameStep_1 = require("./SiteNameStep");
const SiteOSStep_1 = require("./SiteOSStep");
const SiteRuntimeStep_1 = require("./SiteRuntimeStep");
function createAppService(appKind, actionContext, subscriptionContext, createOptions, showCreatingTreeItem) {
    return __awaiter(this, void 0, void 0, function* () {
        // tslint:disable-next-line:strict-boolean-expressions
        createOptions = createOptions || {};
        const promptSteps = [];
        const executeSteps = [];
        let wizardContext = {
            newSiteKind: appKind,
            newSiteOS: createOptions.os ? AppKind_1.WebsiteOS[createOptions.os] : undefined,
            newSiteRuntime: createOptions.runtime,
            subscriptionId: subscriptionContext.subscriptionId,
            subscriptionDisplayName: subscriptionContext.subscriptionDisplayName,
            credentials: subscriptionContext.credentials,
            environment: subscriptionContext.environment,
            newResourceGroupName: createOptions.resourceGroup
        };
        promptSteps.push(new SiteNameStep_1.SiteNameStep());
        switch (appKind) {
            // Functions app will not use streamlined experience
            case AppKind_1.AppKind.functionapp:
                promptSteps.push(new vscode_azureextensionui_1.ResourceGroupListStep());
                promptSteps.push(new SiteOSStep_1.SiteOSStep());
                promptSteps.push(new SiteRuntimeStep_1.SiteRuntimeStep());
                promptSteps.push(new vscode_azureextensionui_1.StorageAccountListStep({
                    kind: vscode_azureextensionui_1.StorageAccountKind.Storage,
                    performance: vscode_azureextensionui_1.StorageAccountPerformance.Standard,
                    replication: vscode_azureextensionui_1.StorageAccountReplication.LRS
                }, {
                    kind: [
                        vscode_azureextensionui_1.StorageAccountKind.BlobStorage
                    ],
                    performance: [
                        vscode_azureextensionui_1.StorageAccountPerformance.Premium
                    ],
                    replication: [
                        vscode_azureextensionui_1.StorageAccountReplication.ZRS
                    ],
                    learnMoreLink: 'https://aka.ms/Cfqnrc'
                }));
                promptSteps.push(new vscode_azureextensionui_1.LocationListStep());
                break;
            case AppKind_1.AppKind.app:
                if (createOptions.advancedCreation) {
                    promptSteps.push(new vscode_azureextensionui_1.ResourceGroupListStep());
                    promptSteps.push(new SiteOSStep_1.SiteOSStep());
                    promptSteps.push(new SiteRuntimeStep_1.SiteRuntimeStep());
                    promptSteps.push(new AppServicePlanListStep_1.AppServicePlanListStep());
                    promptSteps.push(new vscode_azureextensionui_1.LocationListStep());
                }
                else {
                    yield createWebApp_1.setWizardContextDefaults(wizardContext);
                    promptSteps.push(new vscode_azureextensionui_1.LocationListStep());
                    promptSteps.push(new SiteOSStep_1.SiteOSStep()); // will be skipped if there is a smart default
                    promptSteps.push(new SiteRuntimeStep_1.SiteRuntimeStep());
                    executeSteps.push(new vscode_azureextensionui_1.ResourceGroupCreateStep());
                    executeSteps.push(new AppServicePlanCreateStep_1.AppServicePlanCreateStep());
                }
            default:
        }
        executeSteps.push(new SiteCreateStep_1.SiteCreateStep(createOptions.createFunctionAppSettings));
        const wizard = new vscode_azureextensionui_1.AzureWizard(promptSteps, executeSteps, wizardContext);
        // Overwrite the generic 'locationsTask' with a list of locations specific to provider "Microsoft.Web"
        const client = vscode_azureextensionui_1.createAzureClient(wizardContext, azure_arm_website_1.default);
        wizardContext.locationsTask = client.listGeoRegions({
            linuxDynamicWorkersEnabled: wizardContext.newSiteKind === AppKind_1.AppKind.functionapp && wizardContext.newSiteOS === 'linux' ? true : undefined
        });
        // Ideally actionContext should always be defined, but there's a bug with the TreeItemPicker. Create a 'fake' actionContext until that bug is fixed
        // https://github.com/Microsoft/vscode-azuretools/issues/120
        // tslint:disable-next-line:strict-boolean-expressions
        actionContext = actionContext || { properties: {}, measurements: {} };
        wizardContext = yield wizard.prompt(actionContext);
        if (showCreatingTreeItem) {
            showCreatingTreeItem(nonNull_1.nonNullProp(wizardContext, 'newSiteName'));
        }
        if (wizardContext.newSiteKind === AppKind_1.AppKind.app && !createOptions.advancedCreation) {
            const location = nonNull_1.nonNullProp(wizardContext, 'location');
            const basicPlanSku = { name: 'B1', tier: 'Basic', size: 'B1', family: 'B', capacity: 1 };
            const freePlanSku = { name: 'F1', tier: 'Free', size: 'F1', family: 'F', capacity: 1 };
            wizardContext.newResourceGroupName = `appsvc_rg_${wizardContext.newSiteOS}_${location.name}`;
            wizardContext.newPlanName = `appsvc_asp_${wizardContext.newSiteOS}_${location.name}`;
            // Free tier is only available for Windows
            wizardContext.newPlanSku = wizardContext.newSiteOS === AppKind_1.WebsiteOS.windows ? freePlanSku : basicPlanSku;
        }
        const creatingNewApp = localize_1.localize('CreatingNewApp', 'Creating {0} "{1}"...', AppKind_1.getAppKindDisplayName(wizardContext.newSiteKind), wizardContext.newSiteName);
        yield vscode.window.withProgress({ title: creatingNewApp, location: vscode.ProgressLocation.Notification }, () => __awaiter(this, void 0, void 0, function* () {
            wizardContext = yield wizard.execute(actionContext);
        }));
        actionContext.properties.os = wizardContext.newSiteOS;
        actionContext.properties.runtime = wizardContext.newSiteRuntime;
        actionContext.properties.advancedCreation = createOptions.advancedCreation ? 'true' : 'false';
        return nonNull_1.nonNullProp(wizardContext, 'site');
    });
}
exports.createAppService = createAppService;
//# sourceMappingURL=createAppService.js.map