"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
const localize_1 = require("../localize");
var WebsiteOS;
(function (WebsiteOS) {
    WebsiteOS["linux"] = "linux";
    WebsiteOS["windows"] = "windows";
})(WebsiteOS = exports.WebsiteOS || (exports.WebsiteOS = {}));
var AppKind;
(function (AppKind) {
    AppKind["app"] = "app";
    AppKind["functionapp"] = "functionapp";
})(AppKind = exports.AppKind || (exports.AppKind = {}));
/**
 * Retrieves a valid "kind" for Site
 */
function getSiteModelKind(kind, os) {
    let planKind;
    if (os === WebsiteOS.linux) {
        return `${kind},${WebsiteOS.linux}`;
    }
    else {
        // "app" or "functionapp"
        planKind = kind;
    }
    return planKind;
}
exports.getSiteModelKind = getSiteModelKind;
/**
 * Retrieves a valid "kind" for AppServicePlan
 */
function getAppServicePlanModelKind(_kind, os) {
    // Always create app plans, no matter what the website kind
    if (os === WebsiteOS.linux) {
        return WebsiteOS.linux;
    }
    else {
        return AppKind.app;
    }
}
exports.getAppServicePlanModelKind = getAppServicePlanModelKind;
function getAppKindDisplayName(kind) {
    switch (kind) {
        case AppKind.app:
            return localize_1.localize('WebApp', "Web App");
        case AppKind.functionapp:
            return localize_1.localize('FunctionApp', "Function App");
        default:
            throw new RangeError();
    }
}
exports.getAppKindDisplayName = getAppKindDisplayName;
function getWebsiteOSDisplayName(kind) {
    switch (kind) {
        case WebsiteOS.windows:
            return 'Windows';
        case WebsiteOS.linux:
            return 'Linux';
        default:
            throw new RangeError();
    }
}
exports.getWebsiteOSDisplayName = getWebsiteOSDisplayName;
//# sourceMappingURL=AppKind.js.map