"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const azure_arm_website_1 = require("azure-arm-website");
const vscode_azureextensionui_1 = require("vscode-azureextensionui");
const extensionVariables_1 = require("../extensionVariables");
const AppKind_1 = require("./AppKind");
const AppServicePlanListStep_1 = require("./AppServicePlanListStep");
const AppServicePlanNameStep_1 = require("./AppServicePlanNameStep");
class SiteNameStep extends vscode_azureextensionui_1.AzureNameStep {
    prompt(wizardContext) {
        return __awaiter(this, void 0, void 0, function* () {
            const client = vscode_azureextensionui_1.createAzureClient(wizardContext, azure_arm_website_1.WebSiteManagementClient);
            wizardContext.newSiteName = (yield extensionVariables_1.ext.ui.showInputBox({
                prompt: `Enter a globally unique name for the new ${AppKind_1.getAppKindDisplayName(wizardContext.newSiteKind)}.`,
                validateInput: (value) => __awaiter(this, void 0, void 0, function* () {
                    value = value ? value.trim() : '';
                    const nameAvailability = yield client.checkNameAvailability(value, 'site');
                    if (!nameAvailability.nameAvailable) {
                        return nameAvailability.message;
                    }
                    else {
                        return undefined;
                    }
                })
            })).trim();
            const namingRules = [vscode_azureextensionui_1.resourceGroupNamingRules];
            if (wizardContext.newSiteKind === AppKind_1.AppKind.functionapp) {
                namingRules.push(vscode_azureextensionui_1.storageAccountNamingRules);
            }
            else {
                namingRules.push(AppServicePlanNameStep_1.appServicePlanNamingRules);
            }
            wizardContext.relatedNameTask = this.generateRelatedName(wizardContext, wizardContext.newSiteName, namingRules);
            return wizardContext;
        });
    }
    isRelatedNameAvailable(wizardContext, name) {
        return __awaiter(this, void 0, void 0, function* () {
            const tasks = [vscode_azureextensionui_1.ResourceGroupListStep.isNameAvailable(wizardContext, name)];
            if (wizardContext.newSiteKind === AppKind_1.AppKind.functionapp) {
                tasks.push(vscode_azureextensionui_1.StorageAccountListStep.isNameAvailable(wizardContext, name));
            }
            else {
                tasks.push(AppServicePlanListStep_1.AppServicePlanListStep.isNameAvailable(wizardContext, name, name));
            }
            return (yield Promise.all(tasks)).every((v) => v);
        });
    }
}
exports.SiteNameStep = SiteNameStep;
//# sourceMappingURL=SiteNameStep.js.map