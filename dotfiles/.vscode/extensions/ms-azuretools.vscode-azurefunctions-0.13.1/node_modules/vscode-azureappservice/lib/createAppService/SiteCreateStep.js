"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable-next-line:no-require-imports
const StorageManagementClient = require("azure-arm-storage");
const azure_arm_website_1 = require("azure-arm-website");
const vscode_1 = require("vscode");
const vscode_azureextensionui_1 = require("vscode-azureextensionui");
const extensionVariables_1 = require("../extensionVariables");
const localize_1 = require("../localize");
const nonNull_1 = require("../utils/nonNull");
const randomUtils_1 = require("../utils/randomUtils");
const AppKind_1 = require("./AppKind");
class SiteCreateStep extends vscode_azureextensionui_1.AzureWizardExecuteStep {
    constructor(createFunctionAppSettings) {
        super();
        this.createFunctionAppSettings = createFunctionAppSettings;
    }
    execute(wizardContext) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!wizardContext.site) {
                const creatingNewApp = localize_1.localize('CreatingNewApp', 'Creating {0} "{1}"...', AppKind_1.getAppKindDisplayName(wizardContext.newSiteKind), wizardContext.newSiteName);
                extensionVariables_1.ext.outputChannel.appendLine(creatingNewApp);
                const client = vscode_azureextensionui_1.createAzureClient(wizardContext, azure_arm_website_1.WebSiteManagementClient);
                wizardContext.site = yield client.webApps.createOrUpdate(nonNull_1.nonNullValueAndProp(wizardContext.resourceGroup, 'name'), nonNull_1.nonNullProp(wizardContext, 'newSiteName'), {
                    name: wizardContext.newSiteName,
                    kind: AppKind_1.getSiteModelKind(wizardContext.newSiteKind, nonNull_1.nonNullProp(wizardContext, 'newSiteOS')),
                    location: nonNull_1.nonNullValueAndProp(wizardContext.location, 'name'),
                    serverFarmId: wizardContext.plan ? wizardContext.plan.id : undefined,
                    clientAffinityEnabled: wizardContext.newSiteKind === AppKind_1.AppKind.app,
                    siteConfig: yield this.getNewSiteConfig(wizardContext),
                    reserved: wizardContext.newSiteOS === AppKind_1.WebsiteOS.linux // The secret property - must be set to true to make it a Linux plan. Confirmed by the team who owns this API.
                });
                const createdNewApp = localize_1.localize('CreatedNewApp', 'Created new {0} "{1}": {2}', AppKind_1.getAppKindDisplayName(wizardContext.newSiteKind), wizardContext.site.name, `https://${wizardContext.site.defaultHostName}`);
                extensionVariables_1.ext.outputChannel.appendLine(createdNewApp);
                extensionVariables_1.ext.outputChannel.appendLine('');
                const viewOutput = {
                    title: localize_1.localize('viewOutput', 'View Output')
                };
                // Note: intentionally not waiting for the result of this before returning
                vscode_1.window.showInformationMessage(createdNewApp, viewOutput).then((result) => {
                    if (result === viewOutput) {
                        extensionVariables_1.ext.outputChannel.show();
                    }
                });
            }
            return wizardContext;
        });
    }
    getNewSiteConfig(wizardContext) {
        return __awaiter(this, void 0, void 0, function* () {
            const newSiteConfig = {};
            if (wizardContext.newSiteKind === AppKind_1.AppKind.app) {
                newSiteConfig.linuxFxVersion = wizardContext.newSiteRuntime;
            }
            else {
                const maxFileShareNameLength = 63;
                const storageClient = vscode_azureextensionui_1.createAzureClient(wizardContext, StorageManagementClient);
                const storageAccount = nonNull_1.nonNullProp(wizardContext, 'storageAccount');
                const [, storageResourceGroup] = nonNull_1.nonNullValue(nonNull_1.nonNullProp(storageAccount, 'id').match(/\/resourceGroups\/([^/]+)\//), 'Invalid storage account id');
                const keysResult = yield storageClient.storageAccounts.listKeys(storageResourceGroup, nonNull_1.nonNullProp(storageAccount, 'name'));
                let fileShareName = nonNull_1.nonNullProp(wizardContext, 'newSiteName').toLocaleLowerCase() + '-content'.slice(0, maxFileShareNameLength);
                if (!wizardContext.newStorageAccountName) {
                    const randomLetters = 4;
                    fileShareName = `${fileShareName.slice(0, maxFileShareNameLength - randomLetters - 1)}-${randomUtils_1.randomUtils.getRandomHexString(randomLetters)}`;
                }
                let storageConnectionString = '';
                if (keysResult.keys && keysResult.keys[0].value) {
                    storageConnectionString = `DefaultEndpointsProtocol=https;AccountName=${storageAccount.name};AccountKey=${keysResult.keys[0].value}`;
                }
                if (this.createFunctionAppSettings) {
                    newSiteConfig.appSettings = yield this.createFunctionAppSettings({
                        storageConnectionString,
                        fileShareName,
                        // tslint:disable-next-line:no-non-null-assertion
                        os: wizardContext.newSiteOS,
                        // tslint:disable-next-line:no-non-null-assertion
                        runtime: wizardContext.newSiteRuntime
                    });
                }
            }
            return newSiteConfig;
        });
    }
}
exports.SiteCreateStep = SiteCreateStep;
//# sourceMappingURL=SiteCreateStep.js.map