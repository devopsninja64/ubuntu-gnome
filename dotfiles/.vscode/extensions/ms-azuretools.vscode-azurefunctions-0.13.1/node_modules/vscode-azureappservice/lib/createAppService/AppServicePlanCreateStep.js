"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const azure_arm_website_1 = require("azure-arm-website");
const vscode_azureextensionui_1 = require("vscode-azureextensionui");
const extensionVariables_1 = require("../extensionVariables");
const localize_1 = require("../localize");
const nonNull_1 = require("../utils/nonNull");
const AppKind_1 = require("./AppKind");
class AppServicePlanCreateStep extends vscode_azureextensionui_1.AzureWizardExecuteStep {
    execute(wizardContext) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!wizardContext.plan) {
                const newPlanName = nonNull_1.nonNullProp(wizardContext, 'newPlanName');
                const findingAppServicePlan = localize_1.localize('FindingAppServicePlan', 'Ensuring App Service plan "{0}" exists...', newPlanName);
                const creatingAppServicePlan = localize_1.localize('CreatingAppServicePlan', 'Creating App Service plan "{0}"...', newPlanName);
                const foundAppServicePlan = localize_1.localize('FoundAppServicePlan', 'Successfully found App Service plan "{0}".', newPlanName);
                const createdAppServicePlan = localize_1.localize('CreatedAppServicePlan', 'Successfully created App Service plan "{0}".', newPlanName);
                extensionVariables_1.ext.outputChannel.appendLine(findingAppServicePlan);
                const client = vscode_azureextensionui_1.createAzureClient(wizardContext, azure_arm_website_1.WebSiteManagementClient);
                const rgName = nonNull_1.nonNullValueAndProp(wizardContext.resourceGroup, 'name');
                const existingPlan = yield client.appServicePlans.get(rgName, newPlanName);
                if (existingPlan) {
                    wizardContext.plan = existingPlan;
                    extensionVariables_1.ext.outputChannel.appendLine(foundAppServicePlan);
                }
                else {
                    extensionVariables_1.ext.outputChannel.appendLine(creatingAppServicePlan);
                    wizardContext.plan = yield client.appServicePlans.createOrUpdate(rgName, newPlanName, {
                        kind: AppKind_1.getAppServicePlanModelKind(wizardContext.newSiteKind, nonNull_1.nonNullProp(wizardContext, 'newSiteOS')),
                        sku: nonNull_1.nonNullProp(wizardContext, 'newPlanSku'),
                        location: nonNull_1.nonNullValueAndProp(wizardContext.location, 'name'),
                        reserved: wizardContext.newSiteOS === AppKind_1.WebsiteOS.linux // The secret property - must be set to true to make it a Linux plan. Confirmed by the team who owns this API.
                    });
                    extensionVariables_1.ext.outputChannel.appendLine(createdAppServicePlan);
                }
            }
            return wizardContext;
        });
    }
}
exports.AppServicePlanCreateStep = AppServicePlanCreateStep;
//# sourceMappingURL=AppServicePlanCreateStep.js.map