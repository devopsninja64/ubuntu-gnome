"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const azure_arm_website_1 = require("azure-arm-website");
const vscode_azureextensionui_1 = require("vscode-azureextensionui");
const extensionVariables_1 = require("../extensionVariables");
const localize_1 = require("../localize");
const nonNull_1 = require("../utils/nonNull");
const uiUtils_1 = require("../utils/uiUtils");
const AppKind_1 = require("./AppKind");
const AppServicePlanCreateStep_1 = require("./AppServicePlanCreateStep");
const AppServicePlanNameStep_1 = require("./AppServicePlanNameStep");
const AppServicePlanSkuStep_1 = require("./AppServicePlanSkuStep");
class AppServicePlanListStep extends vscode_azureextensionui_1.AzureWizardPromptStep {
    static getPlans(wizardContext) {
        return __awaiter(this, void 0, void 0, function* () {
            if (wizardContext.plansTask === undefined) {
                const client = vscode_azureextensionui_1.createAzureClient(wizardContext, azure_arm_website_1.WebSiteManagementClient);
                wizardContext.plansTask = uiUtils_1.uiUtils.listAll(client.appServicePlans, client.appServicePlans.list());
            }
            return yield wizardContext.plansTask;
        });
    }
    static isNameAvailable(wizardContext, name, resourceGroupName) {
        return __awaiter(this, void 0, void 0, function* () {
            const plans = yield AppServicePlanListStep.getPlans(wizardContext);
            return !plans.some((plan) => nonNull_1.nonNullProp(plan, 'resourceGroup').toLowerCase() === resourceGroupName.toLowerCase() &&
                nonNull_1.nonNullProp(plan, 'name').toLowerCase() === name.toLowerCase());
        });
    }
    prompt(wizardContext) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!wizardContext.plan && !wizardContext.newPlanName) {
                // Cache hosting plan separately per subscription
                const options = { placeHolder: localize_1.localize('selectPlan', 'Select a {0} App Service plan.', AppKind_1.getWebsiteOSDisplayName(nonNull_1.nonNullProp(wizardContext, 'newSiteOS'))), id: `AppServicePlanListStep/${wizardContext.subscriptionId}` };
                wizardContext.plan = (yield extensionVariables_1.ext.ui.showQuickPick(this.getQuickPicks(wizardContext), options)).data;
                if (wizardContext.plan) {
                    yield vscode_azureextensionui_1.LocationListStep.setLocation(wizardContext, wizardContext.plan.location);
                }
                else {
                    this.subWizard = new vscode_azureextensionui_1.AzureWizard([new AppServicePlanNameStep_1.AppServicePlanNameStep(), new AppServicePlanSkuStep_1.AppServicePlanSkuStep()], [new AppServicePlanCreateStep_1.AppServicePlanCreateStep()], wizardContext);
                }
            }
            return wizardContext;
        });
    }
    getQuickPicks(wizardContext) {
        return __awaiter(this, void 0, void 0, function* () {
            const picks = [{
                    label: localize_1.localize('CreateNewAppServicePlan', '$(plus) Create new App Service plan'),
                    description: '',
                    data: undefined
                }];
            const plans = yield AppServicePlanListStep.getPlans(wizardContext);
            for (const plan of plans) {
                const isNewSiteLinux = wizardContext.newSiteOS === AppKind_1.WebsiteOS.linux;
                const isPlanLinux = nonNull_1.nonNullProp(plan, 'kind').toLowerCase().includes(AppKind_1.WebsiteOS.linux);
                // plan.kind will contain "linux" for Linux plans, but will _not_ contain "windows" for Windows plans. Thus we check "isLinux" for both cases
                if (isNewSiteLinux === isPlanLinux) {
                    picks.push({
                        id: plan.id,
                        label: nonNull_1.nonNullProp(plan, 'name'),
                        description: `${nonNull_1.nonNullProp(plan, 'sku').name} (${plan.geoRegion})`,
                        detail: plan.resourceGroup,
                        data: plan
                    });
                }
            }
            return picks;
        });
    }
}
exports.AppServicePlanListStep = AppServicePlanListStep;
//# sourceMappingURL=AppServicePlanListStep.js.map