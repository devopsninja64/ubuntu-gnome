"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const vscode_1 = require("vscode");
const vscode_azureextensionui_1 = require("vscode-azureextensionui");
const AppKind_1 = require("./AppKind");
const createAppService_1 = require("./createAppService");
function createWebApp(actionContext, subscriptionContext, createOptions, showCreatingTreeItem) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield createAppService_1.createAppService(AppKind_1.AppKind.app, actionContext, subscriptionContext, createOptions, showCreatingTreeItem);
    });
}
exports.createWebApp = createWebApp;
function setWizardContextDefaults(wizardContext) {
    return __awaiter(this, void 0, void 0, function* () {
        yield vscode_azureextensionui_1.LocationListStep.setLocation(wizardContext, 'centralus');
        // defaults that for if one workspace is opened
        if (vscode_1.workspace.workspaceFolders && vscode_1.workspace.workspaceFolders.length === 1) {
            yield vscode_1.workspace.findFiles('package.json').then((files) => {
                if (files.length > 0) {
                    wizardContext.newSiteOS = AppKind_1.WebsiteOS.linux;
                }
            });
            yield vscode_1.workspace.findFiles('*.csproj').then((files) => {
                if (files.length > 0) {
                    wizardContext.newSiteOS = AppKind_1.WebsiteOS.windows;
                }
            });
        }
    });
}
exports.setWizardContextDefaults = setWizardContextDefaults;
//# sourceMappingURL=createWebApp.js.map