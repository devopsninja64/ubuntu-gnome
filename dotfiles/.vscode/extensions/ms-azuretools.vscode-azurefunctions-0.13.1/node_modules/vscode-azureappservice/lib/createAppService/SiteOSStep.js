"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const vscode_azureextensionui_1 = require("vscode-azureextensionui");
const extensionVariables_1 = require("../extensionVariables");
const localize_1 = require("../localize");
const AppKind_1 = require("./AppKind");
class SiteOSStep extends vscode_azureextensionui_1.AzureWizardPromptStep {
    prompt(wizardContext) {
        return __awaiter(this, void 0, void 0, function* () {
            if (wizardContext.newSiteOS === undefined) {
                const picks = Object.keys(AppKind_1.WebsiteOS).map((key) => {
                    const os = AppKind_1.WebsiteOS[key];
                    return { label: AppKind_1.getWebsiteOSDisplayName(os), description: '', data: os };
                });
                wizardContext.newSiteOS = (yield extensionVariables_1.ext.ui.showQuickPick(picks, { placeHolder: localize_1.localize('selectOS', 'Select an OS.') })).data;
            }
            return wizardContext;
        });
    }
}
exports.SiteOSStep = SiteOSStep;
//# sourceMappingURL=SiteOSStep.js.map