"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const stream_1 = require("stream");
const getKuduClient_1 = require("./getKuduClient");
/**
 * Overwrites or creates a file. The etag passed in may be `undefined` if the file is being created
 * Returns the latest etag of the updated file
 */
function putFile(client, data, filePath, etag) {
    return __awaiter(this, void 0, void 0, function* () {
        const kuduClient = yield getKuduClient_1.getKuduClient(client);
        let stream;
        if (typeof data === 'string') {
            stream = new stream_1.Readable();
            stream._read = function () {
                this.push(data);
                this.push(null);
            };
        }
        else {
            stream = data;
        }
        const options = etag ? { customHeaders: { ['If-Match']: etag } } : {};
        const result = yield kuduClient.vfs.putItemWithHttpOperationResponse(stream, filePath, options);
        return result.response.headers.etag;
    });
}
exports.putFile = putFile;
//# sourceMappingURL=putFile.js.map