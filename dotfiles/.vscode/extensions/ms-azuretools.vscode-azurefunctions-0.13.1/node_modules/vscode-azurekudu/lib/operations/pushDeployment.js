/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const msRest = require('ms-rest');
const WebResource = msRest.WebResource;

/**
 * @param {object} file
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {boolean} [options.isAsync]
 *
 * @param {string} [options.author]
 *
 * @param {string} [options.authorEmail]
 *
 * @param {string} [options.deployer]
 *
 * @param {string} [options.message]
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _zipPushDeploy(file, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let isAsync = (options && options.isAsync !== undefined) ? options.isAsync : undefined;
  let author = (options && options.author !== undefined) ? options.author : undefined;
  let authorEmail = (options && options.authorEmail !== undefined) ? options.authorEmail : undefined;
  let deployer = (options && options.deployer !== undefined) ? options.deployer : undefined;
  let message = (options && options.message !== undefined) ? options.message : undefined;
  // Validate
  try {
    if (file === null || file === undefined) {
      throw new Error('file cannot be null or undefined and it must be of type object.');
    }
    if (isAsync !== null && isAsync !== undefined && typeof isAsync !== 'boolean') {
      throw new Error('isAsync must be of type boolean.');
    }
    if (author !== null && author !== undefined && typeof author.valueOf() !== 'string') {
      throw new Error('author must be of type string.');
    }
    if (authorEmail !== null && authorEmail !== undefined && typeof authorEmail.valueOf() !== 'string') {
      throw new Error('authorEmail must be of type string.');
    }
    if (deployer !== null && deployer !== undefined && typeof deployer.valueOf() !== 'string') {
      throw new Error('deployer must be of type string.');
    }
    if (message !== null && message !== undefined && typeof message.valueOf() !== 'string') {
      throw new Error('message must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'api/zipdeploy';
  let queryParameters = [];
  if (isAsync !== null && isAsync !== undefined) {
    queryParameters.push('isAsync=' + encodeURIComponent(isAsync.toString()));
  }
  if (author !== null && author !== undefined) {
    queryParameters.push('author=' + encodeURIComponent(author));
  }
  if (authorEmail !== null && authorEmail !== undefined) {
    queryParameters.push('authorEmail=' + encodeURIComponent(authorEmail));
  }
  if (deployer !== null && deployer !== undefined) {
    queryParameters.push('deployer=' + encodeURIComponent(deployer));
  }
  if (message !== null && message !== undefined) {
    queryParameters.push('message=' + encodeURIComponent(message));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/octet-stream';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = file;
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 202) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @param {object} file
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {boolean} [options.isAsync]
 *
 * @param {string} [options.author]
 *
 * @param {string} [options.authorEmail]
 *
 * @param {string} [options.deployer]
 *
 * @param {string} [options.message]
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _warPushDeploy(file, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let isAsync = (options && options.isAsync !== undefined) ? options.isAsync : undefined;
  let author = (options && options.author !== undefined) ? options.author : undefined;
  let authorEmail = (options && options.authorEmail !== undefined) ? options.authorEmail : undefined;
  let deployer = (options && options.deployer !== undefined) ? options.deployer : undefined;
  let message = (options && options.message !== undefined) ? options.message : undefined;
  // Validate
  try {
    if (file === null || file === undefined) {
      throw new Error('file cannot be null or undefined and it must be of type object.');
    }
    if (isAsync !== null && isAsync !== undefined && typeof isAsync !== 'boolean') {
      throw new Error('isAsync must be of type boolean.');
    }
    if (author !== null && author !== undefined && typeof author.valueOf() !== 'string') {
      throw new Error('author must be of type string.');
    }
    if (authorEmail !== null && authorEmail !== undefined && typeof authorEmail.valueOf() !== 'string') {
      throw new Error('authorEmail must be of type string.');
    }
    if (deployer !== null && deployer !== undefined && typeof deployer.valueOf() !== 'string') {
      throw new Error('deployer must be of type string.');
    }
    if (message !== null && message !== undefined && typeof message.valueOf() !== 'string') {
      throw new Error('message must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'api/wardeploy';
  let queryParameters = [];
  if (isAsync !== null && isAsync !== undefined) {
    queryParameters.push('isAsync=' + encodeURIComponent(isAsync.toString()));
  }
  if (author !== null && author !== undefined) {
    queryParameters.push('author=' + encodeURIComponent(author));
  }
  if (authorEmail !== null && authorEmail !== undefined) {
    queryParameters.push('authorEmail=' + encodeURIComponent(authorEmail));
  }
  if (deployer !== null && deployer !== undefined) {
    queryParameters.push('deployer=' + encodeURIComponent(deployer));
  }
  if (message !== null && message !== undefined) {
    queryParameters.push('message=' + encodeURIComponent(message));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/octet-stream';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = file;
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 202) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/** Class representing a PushDeployment. */
class PushDeployment {
  /**
   * Create a PushDeployment.
   * @param {KuduClient} client Reference to the service client.
   */
  constructor(client) {
    this.client = client;
    this._zipPushDeploy = _zipPushDeploy;
    this._warPushDeploy = _warPushDeploy;
  }

  /**
   * @param {object} file
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.isAsync]
   *
   * @param {string} [options.author]
   *
   * @param {string} [options.authorEmail]
   *
   * @param {string} [options.deployer]
   *
   * @param {string} [options.message]
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  zipPushDeployWithHttpOperationResponse(file, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._zipPushDeploy(file, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @param {object} file
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.isAsync]
   *
   * @param {string} [options.author]
   *
   * @param {string} [options.authorEmail]
   *
   * @param {string} [options.deployer]
   *
   * @param {string} [options.message]
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  zipPushDeploy(file, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._zipPushDeploy(file, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._zipPushDeploy(file, options, optionalCallback);
    }
  }

  /**
   * @param {object} file
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.isAsync]
   *
   * @param {string} [options.author]
   *
   * @param {string} [options.authorEmail]
   *
   * @param {string} [options.deployer]
   *
   * @param {string} [options.message]
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  warPushDeployWithHttpOperationResponse(file, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._warPushDeploy(file, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @param {object} file
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.isAsync]
   *
   * @param {string} [options.author]
   *
   * @param {string} [options.authorEmail]
   *
   * @param {string} [options.deployer]
   *
   * @param {string} [options.message]
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  warPushDeploy(file, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._warPushDeploy(file, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._warPushDeploy(file, options, optionalCallback);
    }
  }

}

module.exports = PushDeployment;
